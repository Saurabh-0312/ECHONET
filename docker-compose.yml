services:
  # Frontend Service - React App with Nginx
  frontend:
    build: 
      context: ./Frontend
      dockerfile: Dockerfile
    image: echonet-frontend:latest
    container_name: echonet-frontend
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_BACKEND_URL_DOCKER=http://backend:3001
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - echonet-network
    volumes:
      # Webroot used by Certbot to respond to ACME challenges
      - certbot-www:/var/www/certbot
      # Let's Encrypt certs (so nginx inside this container can use them)
      - certbot-etc:/etc/letsencrypt:ro

  # Backend Service - Main Node.js API Server
  backend:
    build: 
      context: ./Server
      dockerfile: Dockerfile
    image: echonet-backend:latest
    container_name: echonet-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
    env_file:
      - ./Server/.env
    restart: unless-stopped
    networks:
      - echonet-network
    volumes:
      - ./Server:/app
      - /app/node_modules
      # Make certs available to backend/nginx if needed
      - certbot-etc:/etc/letsencrypt:ro
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  fluence-python-worker:
    build:
      context: ./Python-microservice
      dockerfile: Dockerfile
    image: echonet-fluence-python-worker:latest
    container_name: fluence-python-worker
    ports:
      - "5001:5000"
    restart: unless-stopped
    networks:
      - echonet-network

  # DePIN Marketplace Service
  depin-marketplace:
    build:
      context: ./depin-marketplace
      dockerfile: Dockerfile
    image: echonet-depin-marketplace:latest
    container_name: echonet-depin-marketplace
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - PORT=5002
    env_file:
      - ./depin-marketplace/.env
    restart: unless-stopped
    networks:
      - echonet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Certbot - used for obtaining and renewing Let's Encrypt certificates
  certbot:
    image: certbot/certbot:latest
    container_name: echonet-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - echonet-network
    # Leave entrypoint empty so `docker compose run certbot ...` can be used
    entrypoint: ""
    restart: unless-stopped

networks:
  echonet-network:
    driver: bridge

# Volumes for Let's Encrypt certificates and ACME webroot
volumes:
  certbot-www:
    driver: local
  certbot-etc:
    driver: local